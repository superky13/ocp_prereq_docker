---
- name: copy epel.rpm to host
  copy:
    src: "files/{{ epel_rpm }}"
    dest: "{{ epel_rpm_path }}"

- name: yum install epel release repo
  yum:
    state: present
    name: "{{ epel_rpm_path }}"

- name: register using subscription-manager
  redhat_subscription:
    state: present
    username: "{{ rhn_user }}"
    password: "{{ rhn_password }}"

- name: get the proper ocp pool id
  shell: /usr/bin/subscription-manager list --all --available --matches="*OpenShift Container*" | awk '/Pool ID/ {print $3}' | head -1
  register: ocppool

- name: has the ocp pool id already been attached?
  shell: /usr/bin/subscription-manager list --installed
  register: ocppoolinstalled

- name: register using subscription-manager with ocp pool id
  redhat_subscription:
    state: present
    username: "{{ rhn_user }}"
    password: "{{ rhn_password }}"
    pool: "{{ ocppool.stdout }}"
  when: ocppoolinstalled.stdout.find('Not Subscribed') != -1

- name: does the system have the proper repos enabled?
  shell: subscription-manager repos --list-enabled
  register: ocprepostatus

- name: disable all repos if this is a first run
  shell: subscription-manager repos --disable='*'
  when: ocprepostatus.stdout.find('There were no available repositories matching the specified criteria') != -1

- name: attach proper repos
  shell: "subscription-manager repos --enable={{ item }}"
  with_items:
  - "{{ ocp_repos }}"
  when: ocprepostatus.stdout.find('There were no available repositories matching the specified criteria') != -1

- name: install requisite packages
  yum:
    name: "{{ item }}"
    state: present
  with_items:
  - "{{ packages }}"

- name: add insecure registry option to docker
  template:
    src: "{{ daemonjsonj2 }}"
    dest:  "{{ dockerconfigpath }}"

- name: start firewalld 
  systemd:
    name: firewalld
    state: started
    enabled: true
    daemon_reload: yes

- name: add ports to firewalld
  firewalld:
    port: "{{ item }}/tcp"
    permanent: true
    state: enabled
  with_items:
  - "{{ ports }}"

- name: start and enable docker
  systemd:
    name: docker
    state: started
    daemon-reload: yes
    enabled: yes

- name: create dir for docker-py
  file:
    state: directory
    path: /tmp/docker-py
    mode: 777

- name: unpack docker-py if not already installed
  unarchive:
    src: "files/{{ dockerpytar }}"
    dest: /tmp/docker-py

- name: use pip to install docker-py
  shell: "pip install -e {{ dockerpyinstalldir }}"
  register: dockerpy

- name: create volume on the filesystem for image storage
  file:
    path: "{{ ocpimagepath }}"
    state: directory
    mode: 777
    setype: svirt_sandbox_file_t

- name: pull docker-registry image
  docker_image: 
    name: "{{ dockerregistryimage }}" 

- name: is the registry already up and running? 
  shell: docker ps | grep ocp-local-registry
  register: dockerregstatus
  failed_when: "'ERROR' in dockerregstatus.stderr"

- name: start docker registry container if it's not already running
  shell: "docker run -dit -v /tmp/ocp_images:/var/lib/registry -p 5000:5000 --name ocp-local-registry {{ dockerregistryimage }}"
  when: dockerregstatus.stdout == ""

## worked on centos7 but not rhel7; need to investigate
#- name: start registry container
#  docker_container:
#    name: ocp-local-registry
#    image: "{{ dockerregistryimage }}"
#    ports:
#    - "5000:5000"
#    volumes:
#    - "/tmp/ocp_images:/var/lib/registry"

- name: authenticate to registry.access.redhat.com
  shell: "docker login registry.access.redhat.com -u {{ rhn_user }} -p {{ rhn_password }}"

- name: pull openshift images from red hat and push to local docker registry container
  docker_image: 
    name: "registry.access.redhat.com/{{ item }}"
    repository:  "{{ inventory_hostname }}:5000/{{ item }}"
    push: yes
  with_items:
  - "{{ openshift_images }}"

#- name: authenticate to registry.connect.redhat.com
#  shell: "docker login registry.connect.redhat.com -u {{ rhn_user }} -p {{ rhn_password }}"

#- name: pull nexus images from red hat and push to local docker registry container
#  docker_image: 
#    name: "registry.connect.redhat.com/{{ item }}"
#    repository:  "{{ inventory_hostname }}:5000/{{ item }}"
#    push: yes
#  with_items:
#  - "{{ nexus_images }}"

- name: pull quay and coreos images from docker and push to local docker registry container
  docker_image: 
    name: "{{ item }}"
    repository:  "{{ inventory_hostname }}:5000/{{ item }}"
    push: yes
  with_items:
  - "{{ quay_coreos_images }}"

- name: archive images to local tarball
  include_tasks: archive.yml
  when: archive == 'True'
